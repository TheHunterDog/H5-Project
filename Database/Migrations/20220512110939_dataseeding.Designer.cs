// <auto-generated />
using System;
using Database.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(StudentBeleidContext))]
    [Migration("20220512110939_dataseeding")]
    partial class dataseeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Klasscode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentbegeleiderId")
                        .HasColumnType("int");

                    b.Property<string>("Studentnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tussenvoegsel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentbegeleiderId");

                    b.HasIndex("Studentnummer")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1156618,
                            Achternaam = "Heijnekamp",
                            Klasscode = "OOSDDH2022",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1156618",
                            Tussenvoegsel = "",
                            Voornaam = "Mark"
                        },
                        new
                        {
                            Id = 1152882,
                            Achternaam = "Hutten",
                            Klasscode = "OOSDDH2022",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1152882",
                            Tussenvoegsel = "",
                            Voornaam = "Rob"
                        },
                        new
                        {
                            Id = 1159362,
                            Achternaam = "Pijlgroms",
                            Klasscode = "OOSDDH2022",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1159362",
                            Tussenvoegsel = "",
                            Voornaam = "Antoine"
                        },
                        new
                        {
                            Id = 1160918,
                            Achternaam = "Nijsink",
                            Klasscode = "OOSDDH2022",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1160918",
                            Tussenvoegsel = "",
                            Voornaam = "Evert-Jan"
                        },
                        new
                        {
                            Id = 1147577,
                            Achternaam = "Jongedijk",
                            Klasscode = "OOSDDH2022",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1147577",
                            Tussenvoegsel = "",
                            Voornaam = "Tristan"
                        },
                        new
                        {
                            Id = 1147576,
                            Achternaam = "Jaap",
                            Klasscode = "OOSDDH2023",
                            StudentbegeleiderId = 0,
                            Studentnummer = "s1147576",
                            Tussenvoegsel = "Jappie",
                            Voornaam = "Jan"
                        });
                });

            modelBuilder.Entity("Database.Model.StudentBegeleider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Docentcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Docentcode")
                        .IsUnique();

                    b.ToTable("StudentBegeleiders");

                    b.HasData(
                        new
                        {
                            Id = 964,
                            Docentcode = "SA1234",
                            Naam = "Karen brakband"
                        });
                });

            modelBuilder.Entity("Database.Model.StudentBegeleiderGesprekken", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentBegeleiderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GesprekDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opmerkingen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Voltooid")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "StudentBegeleiderId", "GesprekDatum");

                    b.HasIndex("StudentBegeleiderId");

                    b.ToTable("StudentBegeleiderGesprekken");
                });

            modelBuilder.Entity("Database.Model.Student", b =>
                {
                    b.HasOne("Database.Model.StudentBegeleider", "Studentbegeleider")
                        .WithMany("Students")
                        .HasForeignKey("StudentbegeleiderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Studentbegeleider");
                });

            modelBuilder.Entity("Database.Model.StudentBegeleiderGesprekken", b =>
                {
                    b.HasOne("Database.Model.StudentBegeleider", "StudentBegeleider")
                        .WithMany("StudentBegeleiderGesprekken")
                        .HasForeignKey("StudentBegeleiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Student", "Student")
                        .WithMany("StudentBegeleiderGesprekken")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentBegeleider");
                });

            modelBuilder.Entity("Database.Model.Student", b =>
                {
                    b.Navigation("StudentBegeleiderGesprekken");
                });

            modelBuilder.Entity("Database.Model.StudentBegeleider", b =>
                {
                    b.Navigation("StudentBegeleiderGesprekken");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
